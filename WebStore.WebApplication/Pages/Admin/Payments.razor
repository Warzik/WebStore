@page "/admin/payments"
@inject IJSRuntime JSRuntime
@inject IPaymentService _paymentService
@inject IMapper _mapper;
@attribute [Authorize(Roles = "Administrator")]
@inject ILogger<Payments> Logger

<div class="container-fluid margin-top admin-style">
    <MainPageTitle Title="Payments" />

    <Breadcrumb Items="BreadcrumbItems" />

    <div class="container">



        @if (payments == null)
        {
            <div class="d-flex justify-content-center">

                <div class="small-lds-ellipsis"><div></div><div></div><div></div><div></div></div>

            </div>

        }
        else
        {

            <div class="row ">

                <div class="mb-4  col-sm-6 col-md-4 ">
                    <button class="btn btn-outline-primary w-100" @onclick="OnAddClick"> ADD PAYMENTS</button>
                </div>

                <div class="mb-4  col-sm-6 col-md-4">
                    <button class="btn btn-outline-secondary dropdown-toggle w-100" type="button" @onclick="ToggleSearchDropdown"><span class="d-none d-lg-inline-block">Choose operation field:</span> @searchBy</button>
                    <div class="dropdown-menu @searchDropdownMenuShowClass">
                        @foreach (var parameter in copyParameters)
                        {
                            <div class="dropdown-item" @onclick="(() => ChangeSearchBy(parameter))"> @parameter</div>
                        }

                    </div>
                </div>


                <div class="col-sm-6 col-md-4 mb-4">
                    <button class="btn btn-outline-secondary dropdown-toggle w-100" type="button" @onclick="ToggleOrderDropdown"><span class="d-none d-lg-inline-block">Choose order:</span> @orderType</button>
                    <div class="dropdown-menu @orderDropdownMenuShowClass">
                        <div class="dropdown-item" @onclick='(() => ChangeOderType("Ascending Order"))'> Ascending Order</div>
                        <div class="dropdown-item" @onclick='(() => ChangeOderType("Descending Order"))'> Descending Order</div>
                    </div>
                </div>


                <div class="mb-4 col-sm-6 col-md-4">
                    <button class="btn btn-outline-secondary dropdown-toggle w-100" type="button" @onclick="ToggleProductsPerPageDropdown">Payments per page: @productsPerPage</button>
                    <div class="dropdown-menu @productsPerPageDropdownMenuShowClass">
                        <div class="dropdown-item" @onclick='(() => ChangeProductsPerPage(10))'> 10</div>
                        <div class="dropdown-item" @onclick='(() => ChangeProductsPerPage(20))'> 20</div>
                        <div class="dropdown-item" @onclick='(() => ChangeProductsPerPage(50))'> 50</div>
                        <div class="dropdown-item" @onclick='(() => ChangeProductsPerPage(100))'> 100</div>
                        <form @onsubmit='(() => ChangeProductsPerPage(int.TryParse(inputProductsPerPage, out int n)==true? n: productsPerPage))'>
                            <input class="form-control" placeholder="Type and press enter " @bind="inputProductsPerPage" @bind:event="oninput" />
                        </form>
                    </div>
                </div>
                <div class="col-sm-6 mb-4  col-md-4 ">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <div class="input-group-text">
                                <i class="fas fa-search"></i>
                            </div>
                        </div>
                        <input type="text" placeholder="Type to search" class="form-control" @bind="searchQuery" @bind:event="oninput" @onkeyup="@HandleKeyUp" />
                    </div>

                </div>
                <div class="col-sm-6 col-md-4 col-lg-3 mb-4">
                    <div class="data-card-pagination">
                        <div class="row">
                            @if (currentPage != 1)
                            {
                                <div class="col-2 arrow" @onclick="() => ChangeCurrentPage(currentPage - 1)">
                                    <i class="fas fa-chevron-left"></i>
                                </div>
                            }
                            else
                            {<div class="col-2">
                                </div>
                            }
                            <div class="col-4">
                                <form @onsubmit='(() => ChangeCurrentPage(int.TryParse(inputCurrentPage, out int n)==true? n: currentPage))'>
                                    <input class="form-control w-100" @bind="inputCurrentPage" @bind:event="oninput" />
                                </form>
                            </div>
                            <div class="col-2 from-style">
                                <span>from</span>
                            </div>
                            <div class="col-2">

                                <span>@totalPages</span>
                            </div>
                            @if (currentPage != totalPages)
                            {
                                <div class="col-2 arrow" @onclick="()=>ChangeCurrentPage(currentPage+1)">
                                    <i class="fas fa-chevron-right"></i>
                                </div>
                            }
                            else
                            {<div class="col-2">
                                </div>
                            }

                        </div>
                    </div>
                </div>
            </div>
            if (IsSearching)
            {
                <div class="d-flex justify-content-center">

                    <div class="small-lds-ellipsis"><div></div><div></div><div></div><div></div></div>

                </div>
            }
            else
            {
                <div class="row">
                    @foreach (var payment in payments)
                    {
                        var subTitle = GetPropValue(payment, searchBy) == null ? "NULL" : GetPropValue(payment, searchBy).ToString();
                        <div class="col-sm-6 col-md-4 mb-3">
                            <DataCard TItem="IPaymentBLL"
                                      Title="@payment.PaymentType"
                                      SubTitle="@subTitle"
                                      Color="DataCard<IPaymentBLL>.Colors.yellow"
                                      ItemData="payment"
                                      OnEditClick="OnEditClick"
                                      OnDeleteClick="OnDeleteClick">
                                <i class="fas fa-user"></i>
                            </DataCard>
                        </div>
                    }

                    @if (payments.Count == 0)
                    {
                        <p>No results.</p>
                    }


                </div>
            }
            <div class="d-flex justify-content-center mt-4">
                <div class="data-card-pagination">
                    <div class="row">
                        @if (currentPage > 1)
                        {
                            <div class="col-2 arrow " @onclick="() => ChangeCurrentPage(currentPage - 1)">
                                <i class="fas fa-chevron-left"></i>
                            </div>
                        }
                        else
                        {<div class="col-2">
                            </div>
                        }
                        <div class="col-4">
                            <form @onsubmit='(() => ChangeCurrentPage(int.TryParse(inputCurrentPage, out int n)==true? n: currentPage))'>
                                <input class="form-control w-100" @bind="inputCurrentPage" @bind:event="oninput" />
                            </form>
                        </div>
                        <div class="col-2 from-style">
                            <span>from</span>
                        </div>
                        <div class="col-2">
                            <span>@totalPages</span>
                        </div>
                        @if (currentPage != totalPages)
                        {
                            <div class="col-2 arrow" @onclick="()=>ChangeCurrentPage(currentPage+1)">
                                <i class="fas fa-chevron-right"></i>
                            </div>
                        }
                        else
                        {<div class="col-2">
                            </div>
                        }

                    </div>
                </div>
            </div>
        }


    </div>

    <DataModal Title="Edit Shipper" DataModalIsClicked="editModalIsClicked" MaxWigth="800px">

        @if (currentPayment != null)
        {
            <EditForm class="container" Model="@currentPayment" OnValidSubmit="@EditCurentPayment">
                <div class="data-modal-body row mb-4">
                    <DataAnnotationsValidator />
                    <div class="form-group col-md-6">
                        <label for="PaymentID" class="control-label">PaymentID: </label>
                        <InputText id="PaymentID" @bind-Value="paymentID" disabled class="form-control" />
                        <ValidationMessage For="@(() => currentPayment.PaymentID)" />
                    </div>
                    <div class="form-group col-md-6">
                        <label for="PaymentType" class="control-label">PaymentType: </label>
                        <InputText id="PaymentType" @bind-Value="currentPayment.PaymentType" class="form-control" />
                        <ValidationMessage For="@(() => currentPayment.PaymentType)" />
                    </div>
                    <div class="form-group col-md-6">
                        <label for="Allowed" class="control-label">Allowed: </label>
                        <InputCheckbox id="Allowed" @bind-Value="currentPayment.Allowed" class="form-control" />
                        <ValidationMessage For="@(() =>currentPayment.Allowed)" />
                    </div>
                </div>
                <div class="data-modal-footer">
                    <button type="submit" class="btn btn-primary mr-3">Save Changes</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">Close</button>
                </div>

            </EditForm>
        }
    </DataModal>

    <DataModal Title="Add Payment" DataModalIsClicked="addModalIsClicked" MaxWigth="800px">

        @if (currentPayment != null)
        {
            <EditForm class="container" Model="@currentPayment" OnValidSubmit="@AddCurentPayment">
                <div class="data-modal-body row mb-4">
                    <DataAnnotationsValidator />
                    <div class="form-group col-md-6">
                        <label for="PaymentID" class="control-label">PaymentID: </label>
                        <InputText id="PaymentID" @bind-Value="paymentID" disabled class="form-control" />
                        <ValidationMessage For="@(() => currentPayment.PaymentID)" />
                    </div>
                    <div class="form-group col-md-6">
                        <label for="PaymentType" class="control-label">PaymentType: </label>
                        <InputText id="PaymentType" @bind-Value="currentPayment.PaymentType" class="form-control" />
                        <ValidationMessage For="@(() => currentPayment.PaymentType)" />
                    </div>
                    <div class="form-group col-md-6">
                        <label for="Allowed" class="control-label">Allowed: </label>
                        <InputCheckbox id="Allowed" @bind-Value="currentPayment.Allowed" class="form-control" />
                        <ValidationMessage For="@(() =>currentPayment.Allowed)" />
                    </div>
                </div>
                <div class="data-modal-footer">
                    <button type="submit" class="btn btn-primary mr-3">Save </button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddModal">Close</button>
                </div>

            </EditForm>
        }
    </DataModal>

    <DataModal Title="Delete Payment" DataModalIsClicked="deleteModalIsClicked" MaxWigth="400px">
        <div class="p-3">
            You are sure you want to delete?
        </div>
        <div class="data-modal-footer">
            <button type="button" class="btn btn-danger mr-3" @onclick="DeleteCurentPayment"> Yes</button>
            <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">No</button>
        </div>

    </DataModal>


</div>







@code {
    string[] BreadcrumbItems = new string[] { "Home", "Admin", "Payments" };

    bool serchDropdownMenuIsClicked = false;
    bool orderDropdownMenuIsClicked = false;
    bool productsPerPageDropdownMenuIsClicked = false;
    bool editModalIsClicked = false;
    bool addModalIsClicked = false;
    bool deleteModalIsClicked = false;

    string productsPerPageDropdownMenuShowClass => productsPerPageDropdownMenuIsClicked ? "show" : null;
    string searchDropdownMenuShowClass => serchDropdownMenuIsClicked ? "show" : null;
    string orderDropdownMenuShowClass => orderDropdownMenuIsClicked ? "show" : null;

    int productsPerPage;
    int lastProductsPerPage;
    string inputProductsPerPage;

    string searchBy;

    string orderType;

    string searchQuery = "";
    string lastSearchQuery = "";

    string inputCurrentPage;
    int currentPage;
    int totalPages;

    List<string> copyParameters;
    bool IsSearching = false;
    CancellationTokenSource cancelToken = new CancellationTokenSource();

    private System.Timers.Timer inputTimer;

    List<IPaymentBLL> payments = null;
    List<IPaymentBLL> storedPayments = null;

    Payment currentPayment;

    string paymentID;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            orderType = "Ascending Order";
            productsPerPage = 10;


            storedPayments = (await _paymentService.GetAllAsync()).ToList();
            payments = storedPayments.Take(productsPerPage).OrderBy(x => x.PaymentID).ToList();

            copyParameters = typeof(Payment).GetProperties().Select(p => p.Name).Take(3).ToList();

            searchBy = copyParameters[0];


            currentPage = 1;
            inputCurrentPage = "1";
            totalPages = storedPayments.Count() / productsPerPage;
            if ((storedPayments.Count() - (totalPages * productsPerPage)) != 0)
                totalPages++;

            if (totalPages == 0) totalPages = 1;

            inputTimer = new System.Timers.Timer(500);
            inputTimer.Elapsed += OnUserFinish;
            inputTimer.AutoReset = false;
        }
         catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error");
        }

    }

    public void OnEditClick(IPaymentBLL payment)
    {
        try
        {
            currentPayment = _mapper.Map<Payment>(payment);
            editModalIsClicked = !editModalIsClicked;

            paymentID = currentPayment.PaymentID.ToString();

            JSRuntime.InvokeVoidAsync("Body.Overflow", !editModalIsClicked);
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error");
        }


    }

    public async void EditCurentPayment()
    {
        try
        {
            editModalIsClicked = false;
            _paymentService.Update(_mapper.Map<IPaymentBLL>(currentPayment));
            storedPayments = (await _paymentService.GetAllAsync()).ToList();
            HandleKeyUp();
            await JSRuntime.InvokeVoidAsync("Body.Overflow", true);
        }
         catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error");
        }
    }

    public void CloseEditModal()
    {
        try
        {
            editModalIsClicked = !editModalIsClicked;

            JSRuntime.InvokeVoidAsync("Body.Overflow", true);
        }
         catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error");
        }


    }

    public void OnAddClick()
    {
        try
        {
            currentPayment = new Payment();

            addModalIsClicked = !addModalIsClicked;

            paymentID = currentPayment.PaymentID.ToString();

            JSRuntime.InvokeVoidAsync("Body.Overflow", !addModalIsClicked);

        }
         catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error");
        }
    }

    public void CloseAddModal()
    {
        try
        {
            addModalIsClicked = !addModalIsClicked;

            JSRuntime.InvokeVoidAsync("Body.Overflow", true);
        }
         catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error");
        }


    }

    public async void AddCurentPayment()
    {
        try
        {
            _paymentService.Add(_mapper.Map<IPaymentBLL>(currentPayment));
            addModalIsClicked = false;
            storedPayments = (await _paymentService.GetAllAsync()).ToList();
            HandleKeyUp();
            await JSRuntime.InvokeVoidAsync("Body.Overflow", true);
        }
         catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error");
        }

    }

    public void OnDeleteClick(IPaymentBLL payment)
    {
        try
        {
            currentPayment = _mapper.Map<Payment>(payment);
            deleteModalIsClicked = !deleteModalIsClicked;

            paymentID = currentPayment.PaymentID.ToString();

            JSRuntime.InvokeVoidAsync("Body.Overflow", !deleteModalIsClicked);
        }
         catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error");
        }

    }
    public async void DeleteCurentPayment()
    {
        try
        {
            await _paymentService.Delete(currentPayment.PaymentID);
            deleteModalIsClicked = false;
            storedPayments = (await _paymentService.GetAllAsync()).ToList();
            HandleKeyUp();
            await JSRuntime.InvokeVoidAsync("Body.Overflow", true);

        }
         catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error");
        }

    }

    public void CloseDeleteModal()
    {
        try
        {
            deleteModalIsClicked = !deleteModalIsClicked;

            JSRuntime.InvokeVoidAsync("Body.Overflow", true);
        }
         catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error");
        }


    }

    public void ToggleSearchDropdown()
    {
        serchDropdownMenuIsClicked = !serchDropdownMenuIsClicked;
        orderDropdownMenuIsClicked = false;
        productsPerPageDropdownMenuIsClicked = false;
    }

    public void ToggleOrderDropdown()
    {
        orderDropdownMenuIsClicked = !orderDropdownMenuIsClicked;
        serchDropdownMenuIsClicked = false;
        productsPerPageDropdownMenuIsClicked = false;
    }

    public void ToggleProductsPerPageDropdown()
    {
        productsPerPageDropdownMenuIsClicked = !productsPerPageDropdownMenuIsClicked;
        orderDropdownMenuIsClicked = false;
        serchDropdownMenuIsClicked = false;
    }

    public void ChangeCurrentPage(int page)
    {
        try
        {
            if (page >= totalPages)
            {
                currentPage = totalPages;
                inputCurrentPage = currentPage.ToString();
                HandleKeyUp();

                return;
            }

            if (page <= 0)
            {
                currentPage = 1;
                inputCurrentPage = currentPage.ToString();
                HandleKeyUp();
                return;
            }

            if (currentPage != page)
            {
                currentPage = page;
                inputCurrentPage = currentPage.ToString();
                HandleKeyUp();
                return;
            }
        }
         catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error");
        }


    }

    public void ChangeProductsPerPage(int productOnPage)
    {
        try
        {
            if (productsPerPage == productOnPage || productOnPage > 200) { ToggleProductsPerPageDropdown(); }
            else
            {
                productsPerPage = productOnPage;
                currentPage = 1;
                inputCurrentPage = "1";
                ToggleProductsPerPageDropdown();
                HandleKeyUp();
            }
        }
         catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error");
        }


    }

    public void ChangeOderType(string order)
    {
        try
        {
            if (orderType == order) { ToggleOrderDropdown(); }
            else
            {
                orderType = order;
                ToggleOrderDropdown();
                HandleKeyUp();
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error");
        }

    }

    public void ChangeSearchBy(string changedSearchBy)
    {
        try
        {
            if (searchBy == changedSearchBy) { ToggleSearchDropdown(); }
            else
            {
                searchBy = changedSearchBy;
                HandleKeyUp();
                ToggleSearchDropdown();
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error");
        }

    }
    public object GetPropValue(object src, string propName)
    {

        PropertyInfo propertyInfo = src.GetType().GetProperty(propName);

        if (propertyInfo.PropertyType == typeof(DateTime))
        {
            object value = propertyInfo.GetValue(src, null);

            return value;
        }

        if (propertyInfo.PropertyType == typeof(int))
        {
            object value = propertyInfo.GetValue(src, null);

            return value == null ? 0 : value;
        }

        if (propertyInfo.PropertyType == typeof(int?))
        {
            object value = propertyInfo.GetValue(src, null);

            return value == null ? 0 : value;
        }

        if (propertyInfo.PropertyType == typeof(double))
        {
            object value = propertyInfo.GetValue(src, null);

            return value == null ? 0 : value;
        }

        if (propertyInfo.PropertyType == typeof(bool))
        {
            object value = propertyInfo.GetValue(src, null);

            return value == null ? false : value;
        }

        if (propertyInfo.PropertyType == typeof(decimal))
        {
            object value = propertyInfo.GetValue(src, null);

            return value == null ? 0 : value;
        }

        if (propertyInfo.PropertyType == typeof(float))
        {
            object value = propertyInfo.GetValue(src, null);

            return value == null ? 0 : value;
        }

        if (propertyInfo.PropertyType == typeof(string))
        {
            object value = propertyInfo.GetValue(src, null);

            return value == null ? "Null" : value;
        }

        return 0;
    }


    public void HandleKeyUp()
    {
        try
        {
            if (!IsSearching)
            {
                inputTimer.Stop();

                inputTimer.Start();
            }
            else
            {
                cancelToken.Cancel(true);
            }
        }
         catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error");
        }


    }

    public async void OnUserFinish(Object source, ElapsedEventArgs e)
    {
        try
        {
            await Task.Factory.StartNew(async () =>
            {
                try
                {
                    IsSearching = true;
                    await InvokeAsync(() => StateHasChanged());

                    List<IPaymentBLL> totalSearchPages = null;

                    if (lastSearchQuery != searchQuery)
                    {
                        currentPage = 1;
                        inputCurrentPage = currentPage.ToString();
                    }

                    if (orderType == "Ascending Order")
                    {
                        totalSearchPages = storedPayments.Where(c => GetPropValue(c, searchBy).ToString().ToLower().Contains(searchQuery.ToLower()))
                        .OrderBy(c => GetPropValue(c, searchBy)).ToList();
                        payments = totalSearchPages.Skip((currentPage - 1) * productsPerPage).Take(productsPerPage).ToList();
                    }

                    else if (orderType == "Descending Order")
                    {
                        totalSearchPages = storedPayments.Where(c => GetPropValue(c, searchBy).ToString().ToLower().Contains(searchQuery.ToLower()))
                        .OrderByDescending(c => GetPropValue(c, searchBy)).ToList();
                        payments = totalSearchPages.Skip((currentPage - 1) * productsPerPage).Take(productsPerPage).ToList();
                    }




                    IsSearching = false;

                    if (lastSearchQuery != searchQuery || lastProductsPerPage != productsPerPage)
                    {
                        totalPages = totalSearchPages.Count() / productsPerPage;
                        if ((totalSearchPages.Count() - (totalPages * productsPerPage)) != 0)
                            totalPages++;

                        if (totalPages == 0) totalPages = 1;
                    }

                    lastSearchQuery = searchQuery;
                    lastProductsPerPage = productsPerPage;

                    await InvokeAsync(() => StateHasChanged());
                }
                catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error");
        }
            }, cancelToken.Token);

            cancelToken = new CancellationTokenSource();
        }
         catch (Exception ex)
        {
            Logger.LogWarning(ex, "Error");
        }
    }
}
